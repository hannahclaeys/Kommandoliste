"Beskrivelse","Kode","Kategori"
Opret en DataFrame fra lister,df = pandas.DataFrame(data),"Pandas"
Type,df.dtypes,"Pandas"
"Navngiv kolonner ved oprettelse","df = pandas.DataFrame(data, index=list0, columns=['navn', 'alder', 'medlem'])","Pandas"
Filtrer rækker baseret på en betingelse,df_medlem = df.loc[df.medlem == True],"Pandas"
Opret søjlediagram (bar plot),"df_medlem.plot.bar(y='r', xlabel='navn', ylabel='alder')","Pandas"
Ændr indeks til en bestemt kolonne,"df_load.set_index('Hour', drop=True, inplace=True)","Pandas"
Få antal rækker og kolonner i DataFrame,"df_load.shape","Pandas"
Hent statistisk beskrivelse af DataFrame,df_load.describe(),"Pandas"
Beregn summen af en kolonne,df_load.sum(),"Pandas"
Opret ny kolonne baseret på eksisterende data,df_res['nyt kolonnenavn'] = df_res['eksisterende kolonne'] * ???,"Pandas"
Vælg bestemte rækker og kolonner,".loc[indeks, kolonner]  eller .iloc[0:, 0:]","Pandas"
Opret et areaplot,df_load.plot.area(),"Pandas"
Indlæs CSV-fil til en DataFrame,df_load = pandas.read_csv('OTCloadCurves.csv'),"Pandas"
Udskriv de første værdier af en kolonne,df_sun['Date'].head(),"Pandas"
Konverter kolonne til datetime-format,"df_sun.Date = pandas.to_datetime(df_sun.Date, format='%Y-%m-%d %H:%M')","Pandas"
Udskriv alle kolonnenavne,df_sun.columns,"Pandas"
Slet en kolonne fra DataFrame,"df_sun.drop('Temp', axis=1, inplace=True)","Pandas"
Grupper data efter måned,df_sun_grouped = df_sun.groupby(by=df_sun.index.month),"Pandas"
Udskriv de første værdier af en gruppe (5),print(df_sun_grouped.get_group(5).head()),"Pandas"
Udskriv de sidste værdier af en gruppe (5),print(df_sun_grouped.get_group(5).tail()),"Pandas"
Beregn 20%-fraktil af en kolonne,"q20 = df_PV_day_prod.quantile(q=0.2, numeric_only=True)","Pandas"
Konverter til numpy array,df.to_numpy(),"Pandas"
Erstatter missing values med (default: sidste værdi) eller (med gennemsnitsværdi),df.ffill()     eller   df.fillna(df.mean()),"Pandas"
Sortér DataFrame efter en kolonne,"df.sort_values(by='kolonnenavn', ascending=True)","Pandas"
Flet to DataFrames,"df_flet = pd.merge(df1, df2, on='fælles_kolonne', how='inner')","Pandas"
Pivotér data,"df_pivot = df.pivot_table(values='værdi', index='række', columns='kolonne', aggfunc='sum')","Pandas"
Find unikke værdier i en kolonne,df['kolonnenavn'].unique(),"Pandas"
Tæl forekomster af værdier i en kolonne,df['kolonnenavn'].value_counts(),"Pandas"
Anvend en funktion på en kolonne,df['kolonnenavn'] = df['kolonnenavn'].apply(lambda x: x*2),"Pandas"
Omdøb kolonner,"df.rename(columns={'gammelt_navn': 'nyt_navn'}, inplace=True)","Pandas"
Håndter manglende værdier ved at fjerne dem,df.dropna(),"Pandas"
Håndter manglende værdier ved at erstatte dem,df.fillna(0),"Pandas"
Grupper og aggregér data,df.groupby('kolonnenavn').agg({'anden_kolonne': 'mean'}),"Pandas"
Eksporter DataFrame til CSV,"df.to_csv('filnavn.csv', index=False)","Pandas"
Indsæt en ny række i DataFrame,"df.loc[len(df)] = ['værdi1', 'værdi2', 'værdi3']","Pandas"
Find duplikerede rækker,df.duplicated(),"Pandas"
Fjern duplikerede rækker,df.drop_duplicates(),"Pandas"
Konverter en kolonne til kategorisk datatype,df['kolonnenavn'] = df['kolonnenavn'].astype('category'),"Pandas"
Find korrelation mellem kolonner,df.corr(),"Pandas"
Opret en ny DataFrame fra en dictionary,"df = pd.DataFrame({'kolonne1': [1, 2, 3], 'kolonne2': [4, 5, 6]})","Pandas"
Reshape DataFrame med melt,"df.melt(id_vars=['kolonne1'], value_vars=['kolonne2', 'kolonne3'])","Pandas"
Reshape DataFrame med pivot,"df.pivot(index='kolonne1', columns='kolonne2', values='kolonne3')","Pandas"
Tæl antallet af manglende værdier i hver kolonne,df.isna().sum(),"Pandas"
Tæl antallet af manglende værdier i hver række,df.isna().sum(axis=1),"Pandas"
Konverter en kolonne til en liste,df['kolonnenavn'].tolist(),"Pandas"
Opret en ny kolonne baseret på en betingelse,df['ny_kolonne'] = df['eksisterende_kolonne'].apply(lambda x: 'Ja' if x > 10 else 'Nej'),"Pandas"
Simpelt plot med Matplotlib,"plt.plot([1, 2, 3], [4, 5, 6]); plt.show()","Plots"
Definer funktion numerisk og evaluer i interval,"n_udtr = sp.lambdify(x, udtr); xx = np.linspace(0, 40, num=100); n_udtr(xx)","Plots"
Plotter en funktion med Matplotlib,"ax.plot(xx, n_udtr(xx), linestyle='--', color='blue', linewidth=2, label='$y = x^2$')","Plots"
Plotter gitter (grid),"ax.grid()","Plots"
Sætter x-akse fra 0 til 20,"ax.set_xlim(0, 20)","Plots"
Sætter y-akse fra 0 til 400,"ax.set_ylim(0, 400)","Plots"
Importér matplotlib,"import matplotlib.pyplot as plt","Plots"
Numerisk funktion med sympy,"n_udtr = sp.lambdify(x, udtr)","Plots"
Evaluer funktion i 100 punkter fra 0 til 40,"xx = np.linspace(0, 40, num=100)","Plots"
Evaluer løsning i punkter,"n_udtr(xx)","Plots"
Opret canvas med figur og akse,"fig, ax = plt.subplots(figsize=[10,6])","Plots"
Plot funktion med styling,"ax.plot(xx, n_udtr(xx), linestyle='--', color='blue', linewidth=2, label='$y = x^2$')","Plots"
Tilføj grid til plottet,"ax.grid()","Plots"
Sæt x-akse grænser,"ax.set_xlim(0, 20)","Plots"
Sæt y-akse grænser,"ax.set_ylim(0, 400)","Plots"
Tilføj titel til plot,"ax.set_title(\'Polynomium\', fontsize=16, fontweight='bold')","Plots"
Sæt titel på x-aksen,"ax.set_xlabel(\'x-akse\', fontsize=14)","Plots"
Sæt titel på y-aksen,"ax.set_ylabel(\'y-akse\', fontsize=14)","Plots"
Tilføj forklaring (legend),"ax.legend(loc='upper right')","Plots"
Vis plottet,"plt.show()","Plots"
Importer sympy,"import sympy as sp","Pakker"
Importer alt fra sympy,"from sympy import *","Pakker"
Importer numpy,"import numpy as np","Pakker"
Importer cmath,"import cmath","Pakker"
Importer matplotlib.pyplot,"import matplotlib.pyplot as plt","Pakker"
Importer dtumathtools,"from dtumathtools import *","Pakker"
Importer scipy.integrate,"from scipy.integrate import *","Pakker"
Initialiser flot udskrift i sympy,"init_printing()","Pakker"
Definerer en vektorfunktion,"f_expr = Matrix([ x1 * sin(x2) + x3**2, x1*x2*x3, x1**2 + 4*x2*x3 ])",Differentiabilitet
Evaluerer vektorfunktionen i et punkt,"f_expr.subs({x1: 1, x2: 2, x3: 3})",Differentiabilitet
Beregner gradienten af en funktion,"Nabla = Matrix([diff(f, x1), diff(f, x2)])",Differentiabilitet
Evaluerer gradienten i et punkt,"Nabla.subs({x1: 1, x2: -1})",Differentiabilitet
Definerer enhedsvektor,e = v.normalized(),Differentiabilitet
Beregner retningsafledt,a = e.dot(Nabla),Differentiabilitet
Konstruerer Hesse-matricen manuelt,"H1 = Matrix([[diff(f, x1, 2), diff(f, x1, x2)], [diff(f, x1, x2), diff(f, x2, 2)]])",Differentiabilitet
Bruger indbygget funktion til Hesse-matricen,H2 = dtutools.hessian(f),Differentiabilitet
Definerer en vektorfunktion,"f = Matrix([x1**2 + x2**2 * x3**2 + x4**2 - 1, x1 + x2**2/2 - x3 * x4, x1 * x3 + x2 * x4])",Differentiabilitet
Beregner Jacobi-matricen manuelt,"J = f.jacobian([x1, x2, x3, x4])",Differentiabilitet
Alternativt med dtutools,"J_f = Matrix.vstack(dtutools.gradient(f[0]).T, dtutools.gradient(f[1]).T, dtutools.gradient(f[2]).T)",Differentiabilitet
Definerer parameterkurve,"r = Matrix([u*cos(u), u*sin(u)])",Differentiabilitet
Finder tangentvektoren,"rd = diff(r, u)",Differentiabilitet
Evaluerer tangenten i et punkt,"ru0 = r.subs(u, u0)",Differentiabilitet
"Find egenværdier for en matrix","A.eigenvals()","Egenværdier og Diagonalisering"
"Find egenværdier","algebraiske multiplicitet, ordnet basis for egenrum, A.eigenvects()","Egenværdier og Diagonalisering"
"Udregn det karakteristiske polynomium","A.charpoly()","Egenværdier og Diagonalisering"
"Faktoriser det karakteristiske polynomium","factor(matrix.charpoly().as_expr())","Egenværdier og Diagonalisering"
"Bestem egenrummet for en specifik egenværdi","A.subs(lamb, value).nullspace()","Egenværdier og Diagonalisering"
"Tjek om en matrix er diagonaliserbar","A.is_diagonalizable()","Egenværdier og Diagonalisering"
"Diagonaliser en matrix","A.diagonalize()","Egenværdier og Diagonalisering"
"Skab en diagonal matrix","A = Matrix.diag(1,2,3)","Egenværdier og Diagonalisering"
"Skab en diagonal matrix med liste","A.diag([value1,value2,...])","Egenværdier og Diagonalisering"
"Definér variabel eller symbol","f1, f2 = symbols('f1 f2', cls=Function); t = Symbol('t', real=True)","Differentialligninger"
"Definér en funktion","f = Matrix([f1(t), f2(t)])","Differentialligninger"
"Differentiér en funktion","f1(t).diff(t)","Differentialligninger"
"Integrér en funktion","integrate(f(x), x)","Differentialligninger"
"Opskriv en differentialligning","ODE = f.diff(t) - (A * f)","Differentialligninger"
"Løs en differentialligning symbolsk","dsolve(ODE)","Differentialligninger"
"Løs en differentialligning med begyndelsesbetingelse","bb = {f1(0): x, f2(0): y}; dsolve(ODE, ics=bb)","Differentialligninger"
"Andenordensdifferentieret","ODE = diff(f(t), t, 2) - 6 * diff(f(t), t) + 9 * f(t)","Differentialligninger"
"Udregner prikproduktet af to vektorer (Reelle)","x.dot(y)","Indre produkt og Norm"
"Udregner det indre produkt af to vektorer (med konjugering)","x.dot(y, conjugate_convention='right')","Indre produkt og Norm"
"Beregner normen af en vektor","x.norm() eller x.norm(2)","Indre produkt og Norm"
"Definerer en funktion til at beregne det indre produkt","def inner(x1: Matrix, x2: Matrix): return x1.dot(x2, conjugate_convention='right')","Indre produkt og Norm"
"Beregner projektionen af en vektor på en linje","projX2_x1 = x1.inner(x2) / x2.inner(x2) * x2","Indre produkt og Norm"
"Alternativt ved brug af norm","projX2_x1 = inner(x1, x2) / x2.norm()**2 * x2","Indre produkt og Norm"
"Visualiserer projektionen af en vektor","plot_x1 = dtuplot.quiver((0,0), x1, rendering_kw={'color':'r', 'label': '$x_1$'}) plot_x2 = dtuplot.quiver((0,0), x2, rendering_kw={'color':'c', 'label': '$x_2$', 'alpha': 0.5}) plot_projX2 = dtuplot.quiver((0,0), projX2_x1, rendering_kw={'color':'k', 'label': '$\\mathrm{proj}_{x_2} x_1$'}) (plot_x1 + plot_x2 + plot_projX2).show()","Indre produkt og Norm"
"Kontrollerer om en basis er ortonormal","u1.inner(u1), u1.inner(u2), u1.inner(u3)","Indre produkt og Norm"
"Finder koordinatvektoren i en ortonormal basis","beta_x = Matrix([x.inner(u1), x.inner(u2), x.inner(u3)])","Indre produkt og Norm"
"Udfører Gram-Schmidt ortonormalisering manuelt","w1 = v1; u1 = w1 / w1.norm(); w2 = simplify(v2 - v2.inner(u1) * u1); u2 = expand(w2 / w2.norm())","Indre produkt og Norm"
"Udfører Gram-Schmidt med indbygget funktion","q_2, q_3 = GramSchmidt([v_2, v_3], orthonormal=True)","Indre produkt og Norm"
"Samler egenvektorerne i en matrix","Q = Matrix.hstack(q_1, q_2, q_3)","Indre produkt og Norm"
"Projektionsmatrix","P = expand(u * u.adjoint())","Indre produkt og Norm"
"Definerer en unitær matrix","U = Matrix.hstack(u1, u2, u3, u4)","Indre produkt og Norm"
"Finder det adjungerede af en matrix (konjugeret transponeret)","U.adjoint()","Indre produkt og Norm"
"Kontrollerer om en matrix er unitær","simplify(U * U.adjoint()), simplify(U.adjoint() * U)","Indre produkt og Norm"
"Omskriver til matrix form","A, b = linear_eq_to_matrix(eqns,x1,x2,x3); T = A.row_join(b)","Indre produkt og Norm"
"Til reduceret trappeform","for col in range(T.shape[0]): for row in range(col + 1, T.shape[0]): T[row, :] = T[row, :] - T[row, col] / T[col, col] * T[col, :] T[col, :] = T[col, :] / T[col, col] T","Indre produkt og Norm"
"Importer complex math","import cmath","Komplekse tal"
"Definer komplekst tal","complex(a,b)","Komplekse tal"
"Reel del af z","z.real","Komplekse tal"
"Imaginær del af z","z.imag","Komplekse tal"
"Modulus af z","cmath.polar(z)[0]","Komplekse tal"
"Argument/vinkel af z","cmath.polar(z)[1]","Komplekse tal"
"Polær form af z","cmath.polar(z)","Komplekse tal"
"Rektangulær form fra polær","cmath.rect(r, θ)","Komplekse tal"
"Konjugat af z","z.conjugate()","Komplekse tal"
"z opløftet i n","z**n","Komplekse tal"
"Reciprok af z","1/z","Komplekse tal"
"Definér ligninger og variabler","x1,x2,x3 = symbols('x1:4')","Matricer"
"Ligning 1","eq1 = Eq(-x2 + x3, 2)","Matricer"
"Ligning 2","eq2 = Eq(2*x1 + 4*x2 - 2*x3, 2)","Matricer"
"Ligning 3","eq3 = Eq(3*x1 + 4*x2 + x3, 9)","Matricer"
"Løs ligningssystem","linsolve((eq1,eq2,eq3), (x1,x2,x3))","Matricer"
"Opret matrix A","A = Matrix([[a,b,c],[d,e,f],[g,h,i]])","Matricer"
"Opret søjlevektor b","b = Matrix([a,b,c])","Matricer"
"Løs ligning Ax=b","linsolve((A,b))","Matricer"
"Gauss-Jordan løsning","A.gauss_jordan_solve(b)","Matricer"
"Lav totalmatrix","T = Matrix.hstack(A,b)","Matricer"
"Alternativ totalmatrix","T = A.row_join(b)","Matricer"
"Reduceret trappeform","T.rref(pivots=False)","Matricer"
"Ombytning af rækker","T1 = T.elementary_row_op('n<->m', 0, 1)","Matricer"
"Skaler række","T2 = T1.elementary_row_op('n->kn', 0, S(1)/2)","Matricer"
"Tilføj række med faktor","T3 = T2.elementary_row_op('n->n+km',2,-3,0)","Matricer"
"Rang af matrix","A.rank()","Matricer"
"Invers af matrix","A**(-1)","Matricer"
"Transponér matrix","A.transpose()","Matricer"
"Determinant","A.det()","Matricer"
"Overskrift niveau 1","# H1","Jupyter Notebook"
"Overskrift niveau 2","## H2","Jupyter Notebook"
"Overskrift niveau 3","### H3","Jupyter Notebook"
"Fed tekst","**bold text**","Jupyter Notebook"
"Kursiv tekst","*italicized text*","Jupyter Notebook"
"Blockquote","> blockquote","Jupyter Notebook"
"Ordnet liste","1. First item\n2. Second item\n3. Third item","Jupyter Notebook"
"Uordnet liste","- First item\n- Second item\n- Third item","Jupyter Notebook"
"Inline kode","`code`","Jupyter Notebook"
"Horisontal linje","---","Jupyter Notebook"
"Link","[title](https://www.example.com)","Jupyter Notebook"
"Billede","![alt text](image.jpg)","Jupyter Notebook"
"Tabel","| Syntax | Description |\n| ----------- | ----------- |\n| Header | Title |\n| Paragraph | Text |","Jupyter Notebook"
"Kodeblok","```\n{\n  'firstName': 'John',\n  'lastName': 'Smith',\n  'age': 25\n}\n```","Jupyter Notebook"
"Fodnote","Here's a sentence with a footnote. [^1]\n\n[^1]: This is the footnote.","Jupyter Notebook"
"Overskrift med ID","### My Great Heading {#custom-id}","Jupyter Notebook"
"Definitionsliste","term\n: definition","Jupyter Notebook"
"Gennemstreget tekst","~~The world is flat.~~","Jupyter Notebook"
"Opgaveliste","- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media","Jupyter Notebook"
"Emoji",":joy:","Jupyter Notebook"
"Fremhævning","==very important words==","Jupyter Notebook"
"Subscript","H~2~O","Jupyter Notebook"
"Superscript","X^2^","Jupyter Notebook"
"Udvikler en funktion i en Taylor-række","series(funktion, variabel, x0, K+1)","Taylor-approksimationer"
"Udvikler Taylor-polynomiet uden O-leddet","series(funktion, variabel, x0, K+1).removeO()","Taylor-approksimationer"
"Taylor-approksimation af cosinus omkring 0 af grad 6","series(cos(x), x, 0, 7).removeO()","Taylor-approksimationer"
"Udvikler Taylor-polynomiet for ln(x) i x = 1 af grad 3","series(ln(x), x, 1, 4).removeO()","Taylor-approksimationer"
"Evaluerer Taylor-polynomiet i x=5/4","P3.subs(x, Rational(5/4))","Taylor-approksimationer"
"Finder 4. afledte af ln(x) i x_i","diff(ln(x), x, 4).subs(x, xi)","Taylor-approksimationer"
"Beregner restled generelt","R = abs(diff(funktion,variabel,n+1).subs(x,f(x0)) * (x - x0) ** 4 /(factorial(n+1)))","Taylor-approksimationer"
"Beregner restleddet eksempel R3(5/4)","abs(diff(ln(x), x, 4).subs(x, 1) * (5/4 - 1) ** 4 / factorial(4))","Taylor-approksimationer"
"Udvikler sin(x)/x i Taylor-række omkring x=0","series(sin(x), x, 0, 3)","Taylor-approksimationer"
"Beregner grænseværdi af sin(x)/x ved x→0","limit(sin(x)/x, x, 0)","Taylor-approksimationer"
"Udvikler en brøk i en Taylor-række","series((exp(x) - exp(-x) - 2*x) / (x - sin(x)), x, 0, 4)","Taylor-approksimationer"
"Definerer en funktion af to variable","f = sin(x**2 + y**2)","Taylor-approksimationer"
"3D-plot af funktionen","dtuplot.plot3d(f, (x, -1.5, 1.5), (y, -1.5, 1.5))","Taylor-approksimationer"
"Udvikler en funktion i et udviklingspunkt (0,0) af grad 2","dtutools.taylor(f, [x, 0, y, 0], degree=3)","Taylor-approksimationer"
"Udvikler en funktion i (0,0) af grad 6","dtutools.taylor(f, [x, 0, y, 0], 7)","Taylor-approksimationer"
"Definerer en funktion af tre variable","f = sin(x1**2 - x2) * exp(x3)","Taylor-approksimationer"
"Beregner gradienten af funktionen i udviklingspunkt (1,1,0)","dtutools.gradient(f, (x1, x2, x3)).subs([(x1, 1), (x2, 1), (x3, 0)])","Taylor-approksimationer"
"Beregner Hessian-matricen i udviklingspunktet","dtutools.hessian(f, (x1, x2, x3)).subs([(x1, 1), (x2, 1), (x3, 0)])","Taylor-approksimationer"
"Beregner andengrads Taylor-polynomium","P2 = f.subs([(x1, 1), (x2, 1), (x3, 0)]) + nabla_f.dot(x - x0) + S('1/2')* ((x - x0).T * Hf * (x - x0))[0]","Taylor-approksimationer"
"Definerer en matrix i NumPy","A_np = np.array([[1,2,3],[4,5,6],[7,8,9]], dtype=float)","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Definerer en vektor i NumPy","x_np = np.array([1,2,3], dtype=float)","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Transponerer en matrix","A_np.T","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Matrix-vektor multiplikation","A_np @ x_np eller A_np.dot(x_np)","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Matrix-matrix multiplikation","A_np @ A_np eller A_np.dot(A_np)","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Element-wise multiplikation af vektor og matrix","A_np * x_np","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Importerer CSV-fil til NumPy-array","data = np.genfromtxt('weight-height.csv', delimiter=',', dtype=[('Gender', 'U10'), ('Height', 'f8'), ('Weight', 'f8')])","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Adgang til kolonner i datasættet","height = data['Height'], weight = data['Weight']","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Scatter-plot af datasæt","plt.scatter(height, weight, color='c', marker='x')","Plots"
"Beregner gennemsnit af søjler","X.mean(axis=0)","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Centrerer data","X_st = X - X.mean(axis=0)","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Beregner kovariansmatrix","C = np.cov(X_st.T)","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Finder egenværdier og egenvektorer","lamda, Q = np.linalg.eig(C)","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Projektion af data på første hovedkomponent","X_proj = X_st @ Q[:, :1]","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Checker om en matrix er symmetrisk","A.is_symmetric()","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Checker om en matrix er Hermitisk","A.is_hermitian","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Finder adjungeret (Hermitisk transponeret) matrix","B.adjoint() eller B.H","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Diagonaliserer en matrix","V, Lambda = A.diagonalize()","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Bekræfter diagonaliseringsrelation","Lambda == Q.T * A * Q","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Identitetsmatrix","n = Q.shape[1]  # Antal søjler i Q\nI = eye(n)  # Identitetsmatrix af størrelse n x n","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Checker om en matrix er positivt definit","A.is_positive_definite","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Beregner egenværdier og egenvektorer","A.eigenvects()","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Laver ortogonal matrix af egenvektorer","Q = Matrix.hstack(*[ev[i][2][0].normalized() for i in range(n)])","Spektralsætningen, diagonalisering og Hermitiske matricer"
"Importer sympy","import sympy as sp","Matematik"
"Importer numpy","import numpy as np","Matematik"
"Initialiser flot print (sympy)","from sympy import init_printing; init_printing()","Matematik"
"Importer matplotlib","import matplotlib.pyplot as plt","Matematik"
"Importer heltalsbrøk","from sympy import Integer as hel","Matematik"
"Definer symboler","x, y = sp.symbols('x y', positive=True)","Matematik"
"Ligning cos(x) = 1","sp.Eq(sp.cos(x), 1)","Matematik"
"Løs ligning","sp.solve(udtr, x)","Matematik"
"Løsning som mængde","sp.solveset(udtr, x)","Matematik"
"Ligningssystem","sp.solve([ls1, ls2, ls3], x, y, z)","Matematik"
"Simplificer udtryk","udtr.simplify()","Matematik"
"Faktoriser udtryk","udtr.factor()","Matematik"
"Ekspandér udtryk","udtr.expand()","Matematik"
"Saml x'er","udtr.collect(x)","Matematik"
"Brøksimplificering","udtr.cancel()","Matematik"
"Partiel brøkopdeling","udtr.apart()","Matematik"
"Ekspander logaritme","sp.expand_log(udtr)","Matematik"
"Symbol: uendelig","sp.oo","Matematik"
"Symbol: imaginær enhed","sp.I","Matematik"
"Symbol: pi","sp.pi","Matematik"
"Symbol: Eulers tal","sp.E","Matematik"
"Symbol: logaritme","sp.log","Matematik"
"Substituer x med 42","udtr.subs(x, 42)","Matematik"
"Evaluer udtryk numerisk","num.evalf(4)","Matematik"
"Limit mod 0","udtr.limit(x, 0)","Matematik"
"Limit fra venstre","udtr.limit(x, 0, '-')","Matematik"
"Numér funktion","n_udtr = sp.lambdify(x, udtr)","Matematik"
"Opret x-værdier","xx = np.linspace(0, 40, num=100)","Matematik"
"Evaluer løsning","n_udtr(xx)","Matematik"
"Opret canvas","fig, ax = plt.subplots(figsize=[10,6])","Matematik"
"Plot funktion","ax.plot(xx, n_udtr(xx), linestyle='--', color='blue', linewidth=2, label='$y = x^2$')","Matematik"
"Tilføj grid","ax.grid()","Matematik"
"Sæt x-akse","ax.set_xlim(0, 20)","Matematik"
"Sæt y-akse","ax.set_ylim(0, 400)","Matematik"
"Titel til plot","ax.set_title('Polynomium', fontsize=16, fontweight='bold')","Matematik"
"x-akse titel","ax.set_xlabel('x-akse', fontsize=14)","Matematik"
"y-akse titel","ax.set_ylabel('y-akse', fontsize=14)","Matematik"
"Tilføj forklaring","ax.legend(loc='upper right')","Matematik"
"Vis plot","plt.show()","Matematik"
"Simpelt plot","import matplotlib.pyplot as plt; plt.plot([1, 2, 3], [4, 5, 6]); plt.show()","Matematik"
"Definerer en funktion symbolsk","f_expr = x * exp(x)","Funktioner, Partielle afledede, Gradient-vektoren"
"Evaluerer funktionen i et punkt","f_expr.subs(x, -2)","Funktioner, Partielle afledede, Gradient-vektoren"
"Differentierer funktionen én gang","f_maerke = f_expr.diff(x)","Funktioner, Partielle afledede, Gradient-vektoren"
"Differentier funktionen to gange","f.diff(x, 2)","Funktioner, Partielle afledede, Gradient-vektoren"
"Beregner grænseværdi","f_expr.limit(x, -oo), f_expr.limit(x, oo), f_expr.limit(x, -2)","Funktioner, Partielle afledede, Gradient-vektoren"
"Definerer en stykkevis funktion","g_expr = Piecewise((-x, x < 0), (exp(x), x >= 0))","Funktioner, Partielle afledede, Gradient-vektoren"
"Definerer en funktion af to variable","x, y = symbols('x y'); f = x*y**2 + x","Funktioner, Partielle afledede, Gradient-vektoren"
"Finder partielle afledede","f.diff(x), f.diff(y)","Funktioner, Partielle afledede, Gradient-vektoren"
"Finder andenordens partielle afledede","f.diff(x,2), f.diff(x,y), f.diff(y,x), f.diff(y,2)","Funktioner, Partielle afledede, Gradient-vektoren"
"Evaluerer en partiel afledt i et punkt","f.diff(x).subs({x: -2, y: 3})","Funktioner, Partielle afledede, Gradient-vektoren"
"2D-plot af en funktion af én variabel","dtuplot.plot(f_expr, f_maerke, (x, -5, 1), ylabel='f(x)')","Plots"
"3D-plot af en funktion af to variable","dtuplot.plot3d(f, (x, -3, 3), (y, -3, 3))","Plots"
"Ændrer synsvinkel for 3D-plot","camera = {'elev': 25, 'azim': 45}","Plots"
"Gør 3D-plot interaktivt (popup-vindue)","%matplotlib qt","Plots"
"Skifter tilbage til inline-plotning","%matplotlib inline","Plots"
"3D-plot med farvekodning","dtuplot.plot3d(f, (x, -3, 3), (y, -3, 3), use_cm=True, legend=True)","Plots"
"Plotter niveaukurver","dtuplot.plot_contour(f, (x, -3, 3), (y, -3, 3))","Plots"
"Bestemmer specifikke højder for niveaukurver","zvals = [-2, -1, 0, 1] dtuplot.plot_contour(f, (x, -3, 3), (y, -3, 3), rendering_kw={'levels': zvals, 'alpha': 0.5}, is_filled=False)","Plots"
"Finder gradienten af en funktion","nf = Matrix([f.diff(x), f.diff(y)]) nf1 = dtutools.gradient(f1(x1, x2, a), (x1, x2))","Funktioner, Partielle afledede, Gradient-vektoren"
"Plotter gradientvektorfelt","dtuplot.plot_vector(nf, (x1, -pi/2, 3/2*pi), (x2, 0, 2*pi), scalar=False)","Plots"
"Plotter flottere","dtuplot.plot_vector(nf, (x, -pi/2, 3/2*pi), (y, 0, 2*pi), quiver_kw={'color':'black'}, contour_kw={'cmap': 'Blues_r', 'levels': 20}, grid=False, xlabel='x', ylabel='y', n=15)","Plots"
"Finder kernen af matrixen B","B.nullspace()","Lineær Afbildning"
"Finder søjlerummet af matrixen B","B.columnspace()","Lineær Afbildning"
"Finder rækkerummet af matrixen B","B.rowspace()","Lineær Afbildning"
"Tjekker om lineær afbildning opfylder kravet om addition af vektorer","f(u+v) == f(u) + f(v)","Lineær Afbildning"
"Tjekker om lineær afbildning opfylder kravet om skalarmultiplikation","f(k*u) == k*f(u)","Lineær Afbildning"
"Definerer en afbildningsmatrix for en lineær afbildning f","F = Matrix([[2, 1], [3, 2], [1, 1], [2, 3]])","Lineær Afbildning"
"Opret en variabel","n = 17","variabler_typer"
"Brug af gyldigt variabelnavn","my_var = 42","variabler_typer"
"Udtryk (kombination af værdier og operatorer)","6 * 7","variabler_typer"
"Udskriv til konsol","print('Hello, World!')","variabler_typer"
"Kommentar i koden","# Dette er en kommentar","variabler_typer"
"Boolean-værdi: sand","True","variabler_typer"
"Boolean-værdi: falsk","False","variabler_typer"
"if-else struktur","if x > 0:\n print('positiv')\nelse:\n print('ikke positiv')","conditionals"
"elif (else if)","if x < y:\n print('mindre')\nelif x > y:\n print('større')","conditionals"
"Rekursiv funktion (eksempel)","def countdown(n):\n if n <= 0:\n print('Boom')\n else:\n countdown(n-1)","conditionals"
"while-løkke","while x < 5:\n print(x)\n x += 1","loops"
"for-løkke med range","for i in range(3):\n print(i)","loops"
"for-løkke med zip","for navn, alder in zip(navne, aldre):\n print(navn, alder)","loops"
"Input og konverter til heltal", "n = int(input('Hvad er n?'))","variabler_typer"
"Lighed","x == y","variabler_typer"
"Ulighed","x != y","variabler_typer"
"Større end","x > y","variabler_typer"
"Mindre end","x < y","variabler_typer"
"Større end eller lig med","x >= y","variabler_typer"
"Mindre end eller lig med","x <= y","variabler_typer"
"Modulus (resten ved division)","10 % 3","variabler_typer"
"Definer en funktion","def greet():\n print('Hej')","functions"
"Funktion med parameter","def greet(name):\n print('Hej', name)","functions"
"Funktion der returnerer en værdi","def add(a, b):\n return a + b","functions"
"Opret en liste","students = ['Hermione', 'Harry', 'Ron']","lists"
"Loop gennem en liste","for s in students:\n print(s)","lists"
"Tilføj element til listen","mylist.append(5)","lists"
"Tilføj flere elementer","mylist.extend([1, 2])","lists"
"Fjern specifik værdi","mylist.remove('A')","lists"
"Fjern sidste (eller bestemt) element","mylist.pop()","lists"
"Antal forekomster af værdi","mylist.count(3)","lists"
"Indeks for en værdi","mylist.index('hej')","lists"
"Gør første bogstav stort","'hej'.capitalize()","strings"
"Gør hele strengen småt","'HEJ'.lower()","strings"
"Gør hele strengen stort","'hej'.upper()","strings"
"Fjern whitespace (mellemrum)","' hej '.strip()","strings"
"Erstat tegn","'hej'.replace('h', 'j')","strings"
"Find position af et tegn","'hej'.find('e')","strings"
"Opret dictionary (nøgle/værdi-par)","d = {'navn': 'Bach'}","dict_tuple"
"Gennemløb nøgler og værdier","for k,v in d.items(): print(k, v)","dict_tuple"
"Tuple-opdeling (unpacking)","a, b = (1, 2)","dict_tuple"
"Tuples er uforanderlige","t = (1, 2, 3)","dict_tuple"
"Åbn og skriv til en fil","with open('fil.txt', 'w') as f:\n f.write('hej')","files"
"Åbn og læs fra en fil","with open('fil.txt') as f:\n indhold = f.read()","files"
"Læs linje for linje","for linje in f:\n print(linje)","files"
"Opret en klasse","class Hund:\n def __init__(self):\n  self.navn = 'Fido'","classes"
"Opret et objekt","minhund = Hund()","classes"
"Brug objektets metode/attribut","print(minhund.navn)","classes"
"Beregn rest ved division (modulus)","10 % 3","classes"
"Brug modulus til at tjekke fx ulige","if x % 2 != 0:","classes"
"Centrer en streng","center()","strings"
"Tæl forekomster af en værdi","count()","strings"
"Returnér en kodet version","encode()","strings"
"Tjek om strengen ender med noget","endswith()","strings"
"Indstil tabulatorstørrelse","expandtabs()","strings"
"Formater streng med værdier","format()","strings"
"Formater streng med map","format_map()","strings"
"Find indeks for værdi","index()","strings"
"Tjek om alle tegn er alfanumeriske","isalnum()","strings"
"Tjek om alle tegn er bogstaver","isalpha()","strings"
"Tjek om alle tegn er ASCII","isascii()","strings"
"Tjek om alle tegn er decimaler","isdecimal()","strings"
"Tjek om alle tegn er cifre","isdigit()","strings"
"Tjek om streng er en identifier","isidentifier()","strings"
"Tjek om alle tegn er små bogstaver","islower()","strings"
"Tjek om alle tegn er numeriske","isnumeric()","strings"
"Tjek om alle tegn kan printes","isprintable()","strings"
"Tjek om alle tegn er mellemrum","isspace()","strings"
"Tjek om strengen er i titel-case","istitle()","strings"
"Tjek om alle tegn er store bogstaver","isupper()","strings"
"Saml elementer i iterable til streng","join()","strings"
"Venstrejustér streng","ljust()","strings"
"Fjern mellemrum til venstre","lstrip()","strings"
"Returnér oversættelsestabel","maketrans()","strings"
"Opdel i tre ved separator","partition()","strings"
"Find sidste forekomst af værdi","rfind()","strings"
"Find sidste indeks for værdi","rindex()","strings"
"Højrejustér streng","rjust()","strings"
"Opdel i tre fra højre","rpartition()","strings"
"Split ved separator fra højre","rsplit()","strings"
"Fjern mellemrum til højre","rstrip()","strings"
"Split ved separator","split()","strings"
"Split ved linjeskift","splitlines()","strings"
"Tjek om strengen starter med noget","startswith()","strings"
"Byt store og små bogstaver","swapcase()","strings"
"Gør hvert ord til titel-case","title()","strings"
"Returnér oversat streng","translate()","strings"
"Udfyld med nuller i venstre","zfill()","strings"
"F-streng med heltal (standard)","f'{216}'","strings"
"F-streng med heltal og decimalformat (d)","f'{216:d}'","strings"
"F-streng med bredde på 5","f'{216:5d}'","strings"
"F-streng med ledende nuller og bredde 5","f'{216:05d}'","strings"
"F-streng konverter heltal til float (f)","f'{216:f}'","strings"
"F-streng med float og decimalformat (d) - fejl","f'{pi:d}'","strings"
"F-streng med float (standard)","f'{pi}'","strings"
"F-streng med float og fast notation (f)","f'{pi:f}'","strings"
"F-streng med 2 decimaler (.2f)","f'{pi:.2f}'","strings"
"F-streng med bredde 8 og 2 decimaler (8.2f)","f'{pi:8.2f}'","strings"
"F-streng med bredde 8, 2 decimaler og ledende nuller (08.2f)","f'{pi:08.2f}'","strings"
